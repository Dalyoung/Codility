codility_CycleRotation
 
import java.util.Arrays;
public class Solution {
    public static void main(String[] args) {
 
        Solution s = new Solution();
        int A[] = {3, 8, 9, 7, 6};
        A = s.solution(A, 3);
        System.out.println(Arrays.toString(A));
    }
    public int[] solution(int[] A, int K) {
        // write your code in Java SE 8
        int [] B = new int[A.length];
        for(int i = 0; i < A.length; i++){
            B[(i+K) % A.length] = A[i];
        }
        return B;
    }
}
 
 
codility_FrogJmp
 
public class Solution {
    public static void main(String[] args) {
 
        Solution s = new Solution();
        System.out.println(s.solution(1, 1, 1));
    }
    public int solution(int X, int Y, int D) {
        // write your code in Java SE 8
         
 
        int ret = 0;
         
        int distance = Y - X;
        ret = distance / D;
        if(distance % D != 0){
            ret++;
        }
        return ret;
    }
}
 
codility_FrogRiverOne
 
public class Solution {
    public static void main(String[] args) {
 
        Solution s = new Solution();
        System.out.println(s.solution(1, new int[]{2}));
    }
    public int solution(int X, int[] A) {
        // write your code in Java SE 8
        int ret = -1;
        if(X > A.length){
            return ret;
        }
         
        int l[] = new int[X+1];
        int count = 0;
        for(int i = 0; i < A.length; i++){
            if(l[A[i]] == 0){
                count++;
                l[A[i]] = 1;
            }
             
            if(count == X){
                return i;
            }
        }
        return ret;
    }
}
 
 
codility_MaxCounters
 
public class Solution {
    public static void main(String[] args) {
 
        Solution s = new Solution();
        System.out.println(s.solution(5, new int[]{3, 4, 4, 6, 1, 4, 4}));
    }
    public int[] solution(int N, int[] A) {
        // write your code in Java SE 8
        int max = 0;
        int lastMax = 0;
        int B[] = new int[N];
        for(int k = 0; k < A.length; k++){
            if(A[k] <= N){
                if(B[A[k]-1] < lastMax){
                    B[A[k]-1] = lastMax;
                }
                B[A[k]-1]++;
                max = Math.max(B[A[k]-1], max);
            }else if(A[k] == N + 1){
                lastMax = max;
            }
//          System.out.println(Arrays.toString(B));
        }
         
        for(int i = 0; i < B.length; i++){
            if(B[i] < lastMax){
                B[i] = lastMax;
            }
        }
//      System.out.println(Arrays.toString(B));
        return B;
    }
}
 
 
 
codility_MissingIntger
 
public class Solution {
    public static void main(String[] args) {
 
        Solution s = new Solution();
        System.out.println(s.solution(new int[]{1, 2, 3, 4, 1}));
    }
    public int solution(int[] A) {
        // write your code in Java SE 8
        int B[] = new int[A.length + 1];
        for(int i = 0; i < A.length; i++){
            if(A[i] > 0 && A[i] <= A.length){
                B[A[i]] = 1;
            }
        }
        System.out.println(Arrays.toString(B));
        for(int i = 1; i < B.length; i++){
            if(B[i] == 0){
                return i;
            }
        }
        return B.length;
    }
}
 
codility_OddOccurrencesInArray
 
public class Solution {
    public static void main(String[] args) {
         
        Solution s = new Solution();
//      int A[] = {999, 3, 994, 3, 994, 7, 999};
        int A[] = {13, 5, 13};
        System.out.println(s.solution(A));
    }
    public int solution(int [] A){
 
        //Arrays.sort(A);
        int i;
        int res = 0;
        for (i = 0; i < A.length; i++) 
        {
//          System.out.print(res + " ^ " + A[i] + " = " );
            res = res ^ A[i]; // Implementation of XOR
//          System.out.println(res);
        }
        return res;
    }
}
 
 
codility_PermCheck
 
public class Solution {
    public static void main(String[] args) {
 
        Solution s = new Solution();
        int A[] = {1, 5};
        System.out.println(s.solution(A));
    }
    public int solution(int[] A) {
        int ret = 1;
         
        int [] B = new int[A.length+1];
        for(int i = 0; i < A.length; i++){
            if(A[i] <= A.length){
                B[A[i]]++;
            }
            else{
                return 0;
            }
        }
         
        for(int i = 1; i < B.length; i++){
            if(B[i] != 1){
                return 0;
            }
        }
        return ret;
    }
}
 
 
codility_PermMissingElem
 
public class Solution {
    public static void main(String[] args) {
 
        Solution s = new Solution();
        System.out.println(s.solution(new int[]{}));
    }
    public int solution(int[] A) {
        // write your code in Java SE 8
//      int ret = 0;
         
        long sum1 = 0, sum2 = 0;
        for(int i = 0; i < A.length; i++){
            sum1 += (i + 1);
            sum2 += A[i];
        }
        sum1 += A.length + 1;
        long dist = sum1 - sum2;
        if(dist < 0){
            dist = dist -1;
        }
        return (int)dist;
    }
}
 
codility_TapeEquilibrium
 
public class Solution {
    public static void main(String[] args) {
 
        Solution s = new Solution();
        int A[] = {3, 1};
        System.out.println(s.solution(A));
    }
    public int solution(int[] A) {
        int ret = Integer.MAX_VALUE;
        int sum1 = 0, sum2 = 0;
        sum1 = A[0];
        for(int i = 1; i < A.length; i++){
            sum2 += A[i];
        }
        ret = Math.abs(sum1 - sum2);
        System.out.println(sum1 + " - " + sum2 + " = " + ret);
        for(int i = 2; i < A.length; i++){
            sum1 += A[i-1];
            sum2 -= A[i-1];
            System.out.println(sum1 + " - " + sum2 + " = " + ret);
            ret = Math.min(ret, Math.abs(sum1 - sum2));
        }
        return ret;
    }
}
 
 
codility_PassingCars
 
 
public class Solution {
    public static void main(String[] args) {
 
        Solution s = new Solution();
        System.out.println(s.solution(new int[]{1, 0, 0, 1}));
    }
    public int solution(int[] A) {
        // write your code in Java SE 8
        int ret = 0;
        int r = 0;
     
        for(int i = 0; i < A.length; i++){
            if(A[i] == 0){
                r++;
            }else if(A[i] == 1){
                ret += r;
            }
        }
        if(ret > 1000000000){
            ret = -1;
        }
        return ret;
    }
}



public class Solution {
	public static void main(String[] args) {
		Solution s = new Solution();
		
		String S = "We test coders. Give us a try?";
		S = "Forget    CVs..Save time . x x";
		S = "aaaaaaaaa..                ..aaaaaaaaaaaaaaa";
		System.out.println(s.solution(S));
	}


	public int solution(String S) {
		// write your code in Java SE 8
		S = S.replace('.', '0');
		S = S.replace('?', '0');
		S = S.replace('!', '0');
		
		
		String[] arr = S.split("0");
		
		int ret = 0;
		for(int i = 0; i < arr.length; i++){
			int count = 0;
			String [] temp = arr[i].split(" ");
//			System.out.println(Arrays.toString(temp));
			for(int j = 0; j < temp.length; j++){
				if(!temp[j].isEmpty()){
					count++;
				}
			}
			ret = Math.max(ret, count);
		}
		return ret;
	}

}





public class Solution {
	public static void main(String[] args) {
		Solution s = new Solution();
		String S = "(())))(";
		S = ")()()()())))))))))))";
		System.out.println(s.solution(S));
	}
	
	public int solution(String S) {
        // write your code in Java SE 8
        int ret = 0;
        int sum1 = 0;
        int sum2 = 0;
        boolean chk = false;
        for(int i = 0; i < S.length(); i++){
        	if('(' == S.charAt(i)){
        		chk = true;
        	}else{
        		if(chk)
        		sum2--;
        	}
        }
        int c;
//        System.out.println(sum1 + ", " + sum2);
        for(c = 0; c < S.length(); c++){
        	if(S.charAt(c) == '('){
        		sum1++;
        	}else{
        		if(sum1 != 0){
        			sum2++;
        		}
        	}
//        	System.out.println(sum1 + ", " + sum2);
        	if(sum1 == -sum2 && sum1 != 0 && sum2 != 0){
        		return c + 1;
        	}
        }
        return ret;
    }
	
	
}






public class Solution {
	public static void main(String[] args) {
		Solution s = new Solution();
		double A[] = new double[]{
				1.0, 0,1, -1.0, -7.0, 3.0, -5.0, -2.5, 0.0, 1.0	
		};

		A = new double[]{0, -1};
		//		

		double ret = s.solution(A);
		System.out.println(ret);
	}

	public double solution(double[] A) {
		// write your code in Java SE 8
//		if(A.length == 1){
//			return A[0];
//		}
		double ret = A[0];

		double max = A[0];
		double min = A[0];
		double lastMin = A[0];
		double lastMax = A[0];
		for (int i = 1; i < A.length; i++) {
			if(A[i] > 0){
				max = Math.max(lastMax * A[i], A[i]);
				min = Math.min(lastMin * A[i], A[i]);

			} else {
				max = Math.max(lastMin * A[i], A[i]);
				min = Math.min(lastMax * A[i], A[i]);
			}
			lastMax = max;
			lastMin = min;
			ret = Math.max(ret,lastMax);
		}
		
		if(ret > 1000000000){
			return 1000000000.0;
		}
		return ret;
	}
}



import java.util.ArrayList;
import java.util.List;

public class Solution {
	public static void main(String[] args) {
		Solution s = new Solution();
		int A[] = new int[]{7, 3, 7, 3, 1, 3, 4, 1};
		A = new int[]{1, 1};
		System.out.println(s.solution(A));
	}

	public int solution(int[] A) {
//		if(A.length == 1){
//			return 1;
//		}
		
		int visit[] = new int[A.length+1];
		List<Integer> list = new ArrayList<Integer>();
		for(int i = 0; i < A.length; i++){
			if(visit[A[i]] == 0){
				list.add(A[i]);
				visit[A[i]] = 1;
			}
		}
//		System.out.println(list);
//		System.out.println(Arrays.toString(visit));
		
		int count = 0;
		int length = 0;
		int ret = Integer.MAX_VALUE;
		
		for(int i = 0; i < A.length; i++){
			for(int j = i; j < A.length; j++){
				if(visit[A[j]] == 1){
					visit[A[j]] = 0;
					count++;
					length++;
					
					if(count == list.size()){
						count = 0;
						for(int temp : list){
							visit[temp] = 1;
						}
						if(length < ret){
							ret = length;
							length = 0;
						}
						break;
					}
				}else{
					length++;
				}
			}
		}
		
		return ret;
	}



}

